#include "opencv2/opencv.hpp" 
#include <iostream> 

using namespace cv; 
using namespace std; 

// 영상에서 에지(edge)는 한쪽 방향으로 픽셀 값이 급격하게 바뀌는 부분을 가리킴
// 어두운 영역에서 갑자기 밝아지거나 또는 반대로 밝은 영역에서 급격하게 어두워지는 부분
// 에지를 찾아내는 작업은 객체의 윤곽을 알아낼 수 있는 유용한 방법

// 다양한 컴퓨터 비전 시스템에서 객체 판별을 위한 전처리로 에지 검출이 사용
// 기본적으로 영상에서 에지를 찾아내려면 픽셀 값의 변화율을 측정하여 변화율이 큰 픽셀을 선택해야 함
// 수학에서 함수 또는 데이터의 변화율을 미분(derivative)이라고 하고, 주어진 함수의 순간 변화율을 의미
// 함수 값이 증가하면 미분 값은 0보다 큰 양수, 감소하면 0보다 작은 양수, 일정하면 0에 가까운 값을 가짐

// 영상은 픽셀 값이 정형화되지 않은 상태로 나열되어 있어서 미분 공식을 적용할 수 없음
// 중앙 차분은 중간값 차이를 이용하는 방법이고, 오류가 적어서 실제 영상에서 미분 계산할 때 널리 사용됨 

// 영상은 2차원 평면에서 정의된 함수이기 때문에 에지를 찾기 위해서는 영상을 가로 방향(x), 세로 방향(y)으로 각각 미분해야 함
// 가로 방향으로 미분한다는 것은 y 좌표는 고정한 상태에서 x축 방향으로만 미분 근사를 계산한다는 것을 의미, 이를 x축 방향으로의 편미분(partial derivative)이라고 함

// 마스크를 이용하여 필터링하면 영상을 가로 방향, 세로 방향으로 편미분한 정보를 담고 있는 행렬을 얻을 수 있음
// 영상의 미분은 부호가 있는 실수로 계산되지만 시각적으로 분석하기 위해 미분 값에 128을 더하고 정수로 형변환

// x축 방향, y축 방향 미분을 한꺼번에 벡터로 표현한 것을 그래디언트(gradient)라고 함
// 벡터이기 때문에 크기와 방향 성분(phase) 성분으로 표현할 수 있음
// 크기는 변화율 세기, 방향은 변화 정도가 가장 큰 방향을 나타냄

int main()
{
    Mat src = imread("lenna.bmp", IMREAD_GRAYSCALE);

    if(src.empty) {
        cerr << "Image load failed!" << endl;
        return;
    }

    Mat dx, dy;
    Sobel(src, dx, CV_32FC1, 1, 0); // x축 방향으로 1차 편미분
    Sobel(src, dy, DV_32FC1, 0, 1); // y축 방향으로 1차 편미분
    // Sobel() 함수는 대부분의 경우 1차 미분을 구하는 용도로 사용

    Mat fmag, mag;
    magnitude(dx, dy, fmag); // 그래디언트 크기를 계산하여 fmag에 저장
    fmag.convertTo(mag, CV_8UC1); // 실수형 행렬 fmag를 그레이스케일 형식으로 변환하여 mag에 저장

    Mat edge = mag > 150; 
    // 에지 판별을 위한 그래디언트 크기 임계값을 150으로 설정하여 에지를 판별
    // 행렬 edge의 원소값은 mag 행렬 원소 값이 150보다 크면 255, 작으면 0으로 설정 

    imshow("src", src);
    imshow("mag", mag);
    imshow("edge", edge);

    waitKey();
    destroyAllWindows();

    return 0;
}